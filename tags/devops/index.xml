<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>DevOps on Jonathan&#39;s Blog</title>
    <link>https://jmezach.github.io/tags/devops/</link>
    <description>Recent content in DevOps on Jonathan&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 09 Sep 2020 18:42:10 +0000</lastBuildDate>
    
	<atom:link href="https://jmezach.github.io/tags/devops/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>An update on MSBuild.Sdk.SqlProj</title>
      <link>https://jmezach.github.io/post/update-on-msbuild-sdk-sqlproj/</link>
      <pubDate>Wed, 09 Sep 2020 18:42:10 +0000</pubDate>
      
      <guid>https://jmezach.github.io/post/update-on-msbuild-sdk-sqlproj/</guid>
      <description>A couple of months ago I first wrote about an open source project that I started called MSBuild.Sdk.SqlProj. Since then it has gained some traction and I&amp;rsquo;m happy to say it is probably the most succesful open source project I&amp;rsquo;ve launched ever. So I though this would be a good time to give an update on the project and share some of the things that are new. If you&amp;rsquo;re unfamiliar with the project I recommend reading the announcement blog post first.</description>
    </item>
    
    <item>
      <title>Introducing MSBuild.Sdk.SqlProj</title>
      <link>https://jmezach.github.io/post/introducing-msbuild-sdk-sqlproj/</link>
      <pubDate>Tue, 17 Mar 2020 16:27:16 +0100</pubDate>
      
      <guid>https://jmezach.github.io/post/introducing-msbuild-sdk-sqlproj/</guid>
      <description>At my current employer, R&amp;amp;R Workforce Management, we&amp;rsquo;ve done a pretty big investment on Microsoft&amp;rsquo;s SQL Server Data Tools (SSDT) to manage our database changes. We made that decision when we migrated off of the Oracle database onto SQL Server which is quite a few years back now. At the time it was probably the most mature tool available that allowed us to version control our database changes much like we version controlled all our source code.</description>
    </item>
    
    <item>
      <title>Building a Pull Request bot with Azure Functions - Part 3 - Operating it</title>
      <link>https://jmezach.github.io/post/building-a-pull-request-bot-part3/</link>
      <pubDate>Mon, 24 Feb 2020 20:06:15 +0100</pubDate>
      
      <guid>https://jmezach.github.io/post/building-a-pull-request-bot-part3/</guid>
      <description>This is the third post in my series on building a pull request bot using Azure Functions. If you haven&amp;rsquo;t read my previous posts I strongly recommend doing so before diving into this post. Remember that this series is a part of the Applied Cloud Stories initiative.
 Part 1: Introduction Part 2: How it works Part 3: Operating it  In this post I want to give you a feel for how we operate our pull request on a daily basis.</description>
    </item>
    
    <item>
      <title>Building a Pull Request bot with Azure Functions - Part 2 - How it works</title>
      <link>https://jmezach.github.io/post/building-a-pull-request-bot-part2/</link>
      <pubDate>Mon, 10 Feb 2020 09:14:51 +0100</pubDate>
      
      <guid>https://jmezach.github.io/post/building-a-pull-request-bot-part2/</guid>
      <description>This is the second post in my series on building a pull request bot using Azure Functions. If you haven&amp;rsquo;t read my first post I strongly recommend doing so before diving into this post. Remember that this series is a part of the Applied Cloud Stories initiative.
 Part 1: Introduction Part 2: How it works Part 3: Operating it  In this post I&amp;rsquo;ll dive into the details of how the bot actually works, from receiving notifications from Azure DevOps to managing state and posting comments back to the pull request.</description>
    </item>
    
    <item>
      <title>Building a Pull Request bot with Azure Functions - Part 1 - Introduction</title>
      <link>https://jmezach.github.io/post/building-a-pull-request-bot-part1/</link>
      <pubDate>Wed, 05 Feb 2020 13:49:34 +0100</pubDate>
      
      <guid>https://jmezach.github.io/post/building-a-pull-request-bot-part1/</guid>
      <description>About 2,5 years ago I was talking to my fellow team members about some of their challenges. At the time we had recently switched from TFS Version Control (TFVC) to Git, which obviously introduced quite a few changes in the way we worked. For example, we introduced pull requests as a mandatory step in the development flow in order to increase awareness and code quality. However, we found that some things that would need to happen for every pull request weren&amp;rsquo;t being done (or not done properly) which weren&amp;rsquo;t always caught by reviewers either.</description>
    </item>
    
  </channel>
</rss>